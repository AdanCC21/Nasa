from src.chatgpt_querys import chatgpt_query
from entitys.models import *
from src.gcts import get_weather_data
import pandas as pd
import json

def getStats(data):
    df = pd.DataFrame(data)
    valores = df.iloc[:, 1]
    
    return {
        'min': float(valores.min()),
        'max': float(valores.max()),
        'mean': float(valores.mean())
    }

def weather(data, start_time, end_time, user_plan=""):
    plan_context = f"\n\nPlan del usuario: {user_plan}\nGenera recomendaciones espec√≠ficas considerando este plan." if user_plan.strip() else ""
    
    prompt = f"""
    S√ìLO Y EXCLUSIVAMENTE DEVUELVE UN OBJETO JSON V√ÅLIDO. NO INCLUYAS TEXTO INTRODUCTORIO, EXPLICACIONES, NI MARKDOWN DE C√ìDIGO (```json).
    
    CRITICAL INSTRUCTION: ALL RECOMMENDATIONS MUST BE WRITTEN IN ENGLISH LANGUAGE ONLY.
    
    Eres un meteor√≥logo experto que analiza datos clim√°ticos para generar predicciones y recomendaciones √∫tiles para actividades al aire libre.
    
    Se desea hacer una predicci√≥n meteorol√≥gica de las siguientes variables:
    - Velocidad del viento
    - Precipitaci√≥n
    - Humedad
    - Temperatura
    - Presi√≥n superficial
    - Radiaci√≥n solar
    - Radiaci√≥n infrarroja

    Datos meteorol√≥gicos hist√≥ricos del d√≠a (con estad√≠sticas): {data}

    Per√≠odo de predicci√≥n: 
    - Hora de inicio: {start_time}
    - Hora de fin: {end_time}{plan_context}
    
    INSTRUCCIONES ESPEC√çFICAS:
    
    1. Genera un JSON con predicciones por hora desde {start_time} hasta {end_time}
    2. Crea un resumen general (summary) con promedios y condiciones generales
    3. Usa presion_superficie, radiacion_infrarroja y radiacion_solar para determinar nubosidad
    4. GENERA RECOMENDACIONES PERSONALIZADAS Y ESPEC√çFICAS basadas en:
       - Las condiciones clim√°ticas predichas
       - El rango horario espec√≠fico
       - Actividades t√≠picas para ese per√≠odo del d√≠a
       - Precauciones de seguridad si es necesario
       - Consejos de vestimenta y preparaci√≥n
       - El plan espec√≠fico del usuario si fue proporcionado
    
    Las recomendaciones deben ser:
    - Espec√≠ficas y accionables
    - Relacionadas directamente con los datos meteorol√≥gicos
    - √ötiles para planificar actividades
    - EN INGL√âS y con un tono amigable pero profesional
    - Entre 3-5 recomendaciones por respuesta
    - Personalizadas seg√∫n el plan del usuario cuando sea relevante
    
    Ejemplo de estructura:
    {{
        "summary": {{
            "temperatura": <valor_kelvin>,
            "temperatura_min": <valor_kelvin>,
            "temperatura_max": <valor_kelvin>,
            "nubosidad": "<descripci√≥n_textual>",
            "precipitacion": <valor_mm>,
            "humedad": <valor_kg_kg>,
            "radiacion_solar": <valor_w_m2>,
            "velocidad_viento": <valor_m_s>
        }},
        "data": {{
            "velocidad_viento": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ],
            "precipitacion": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ],
            "humedad": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ],
            "temperatura": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ],
            "presion_superficie": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ],
            "radiacion_solar": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ],
            "radiacion_infrarroja": [
                {{"time": "<hora>", "value": <valor>}},
                {{"time": "<hora>", "value": <valor>}}
            ]
        }},
        "recomendations": [
            "Specific recommendation based on temperature and humidity conditions",
            "Clothing advice considering wind and precipitation levels", 
            "Activity suggestions appropriate for these weather conditions",
            "Solar radiation precaution if necessary for UV protection",
            "Hydration or protection recommendation based on conditions"
        ]
    }}
    
    IMPORTANTE: Cada variable en 'data' debe tener registros para cada hora desde {start_time} hasta {end_time}.
    CRITICAL: All recommendations MUST be written in ENGLISH language only.
    Las recomendaciones deben ser contextuales, espec√≠ficas y √∫tiles para el usuario.
    TOMA EN CUENTA QUE DATA DEBE TERNER POR CADA VARIABLE UN REGISTRO DE CADA HORA DESDE LA HORA INICIAL¬†HASTA¬†LA¬†FINAL
    """
    
    return chatgpt_query(prompt=prompt)
    
"""
time_start - inicio del per√≠odo en formato YYYY-MM-DDThh:mm:ss (UTC)
time_end - fin del per√≠odo en formato YYYY-MM-DDThh:mm:ss (UTC)
"""
def predict(time: Time, location: Location, plan: str = ""):

    start_time = f'2024-{str(time.month).zfill(2)}-{str(time.day).zfill(2)}T00:00:00'
    end_time = f'2024-{str(time.month).zfill(2)}-{str(time.day).zfill(2)}T{time.start_time}:00'
    
    weather_data = get_weather_data(
                        location.lat,
                        location.lon,
                        start_time,
                        end_time
                        )

    simplified_data = {}

    for variable, details in weather_data.items():
        data_values_df = details['data']
        
        if data_values_df.empty:
            continue
            
        value_column_name = data_values_df.columns[-1]
        filtered_data = data_values_df[['time', value_column_name]].copy()
        
        simplified_data[variable] = {
            'stats': getStats(filtered_data),
            'data': filtered_data.to_dict(orient='records')
        }
        
    
    res = weather(simplified_data, time.start_time, time.end_time, plan)
    print("üì§ Plan del usuario:", plan)
    print("ü§ñ Respuesta de ChatGPT:", res)
    
    # Intentar parsear el JSON y verificar recomendaciones
    try:
        parsed_response = json.loads(res)
        print("‚úÖ JSON parseado exitosamente")
        print("üìã Recomendaciones encontradas:", parsed_response.get('recomendations', []))
        return parsed_response
    except json.JSONDecodeError as e:
        print("‚ùå Error al parsear JSON:", str(e))
        print("üîç Respuesta cruda:", res)
        raise